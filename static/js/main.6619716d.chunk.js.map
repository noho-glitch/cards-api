{"version":3,"sources":["Card.js","Deck.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","angle","Math","random","xPos","yPos","_transform","style","transform","this","className","src","image","alt","name","Component","API_URL","Deck","state","deck","drawn","getCard","bind","axios","get","console","log","setState","data","id","deck_id","CARD_URL","draw","success","Error","card","cards","st","code","value","suit","alert","map","c","key","onClick","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"2VAyBeA,G,wDArBb,WAAYC,GAAQ,IAAD,sBACjB,cAAMA,GACN,IAAIC,EAAwB,GAAhBC,KAAKC,SAAgB,GAC7BC,EAAuB,GAAhBF,KAAKC,SAAgB,GAC5BE,EAAuB,GAAhBH,KAAKC,SAAgB,GAJf,OAKjB,EAAKG,WAAL,oBAA+BF,EAA/B,eAA0CC,EAA1C,sBAA4DJ,EAA5D,QALiB,E,qDAQjB,OACE,6BACE,yBACEM,MAAO,CAAEC,UAAWC,KAAKH,YACzBI,UAAU,OACVC,IAAKF,KAAKT,MAAMY,MAChBC,IAAKJ,KAAKT,MAAMc,Y,GAfPC,c,gBCEbC,G,MAAU,uCA8DDC,E,kDA3Db,WAAYjB,GAAQ,IAAD,8BACjB,cAAMA,IACDkB,MAAQ,CACXC,KAAM,KACNC,MAAO,IAET,EAAKC,QAAU,EAAKA,QAAQC,KAAb,gBANE,E,gMASAC,IAAMC,IAAN,UAAaR,EAAb,kB,OAAbG,E,OACJM,QAAQC,IAAIP,GACZV,KAAKkB,SAAS,CAAER,KAAMA,EAAKS,O,mQAGvBC,EAAKpB,KAAKS,MAAMC,KAAKW,Q,SAEnBC,E,UAAcf,E,YAAWa,E,mBAGZN,IAAMC,IAAIO,G,UAAvBC,E,OACJP,QAAQC,IAAIM,GACPA,EAAKJ,KAAKK,Q,sBACP,IAAIC,MAAM,sB,OAIdC,EAAOH,EAAKJ,KAAKQ,MAAM,GAI3B3B,KAAKkB,UAAS,SAAAU,GAAE,MAAK,CACnBjB,MAAM,GAAD,mBACAiB,EAAGjB,OADH,CAEH,CACES,GAAIM,EAAKG,KACT1B,MAAOuB,EAAKvB,MACZE,KAAK,GAAD,OAAKqB,EAAKI,MAAV,eAAsBJ,EAAKK,a,kDAKrCC,MAAM,EAAD,I,+IAIP,IAAML,EAAQ3B,KAAKS,MAAME,MAAMsB,KAAI,SAAAC,GAAC,OAClC,kBAAC,EAAD,CAAMC,IAAKD,EAAEd,GAAIf,KAAM6B,EAAE7B,KAAMF,MAAO+B,EAAE/B,WAE1C,OACE,6BACE,wBAAIF,UAAU,SAAd,oDACA,wBAAIA,UAAU,kBAAd,2DACA,4BAAQmC,QAASpC,KAAKY,SAAtB,cACA,yBAAKX,UAAU,eAAe0B,Q,GAtDnBrB,a,MCKJ+B,MARf,WACE,OACE,yBAAKpC,UAAU,OACb,kBAAC,EAAD,QCKcqC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvC,QAAQuC,MAAMA,EAAMC,c","file":"static/js/main.6619716d.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./Card.css\";\n\nclass Card extends Component {\n  constructor(props) {\n    super(props);\n    let angle = Math.random() * 90 - 45;\n    let xPos = Math.random() * 40 - 20;\n    let yPos = Math.random() * 40 - 20;\n    this._transform = `translate(${xPos}px, ${yPos}px) rotate(${angle}deg)`;\n  }\n  render() {\n    return (\n      <div>\n        <img\n          style={{ transform: this._transform }}\n          className=\"Card\"\n          src={this.props.image}\n          alt={this.props.name}\n        />\n      </div>\n    );\n  }\n}\n\nexport default Card;\n","import React, { Component } from \"react\";\nimport Card from \"./Card\";\nimport axios from \"axios\";\nimport \"./Deck.css\";\n\nconst API_URL = \"https://deckofcardsapi.com/api/deck\";\n\nclass Deck extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      deck: null,\n      drawn: []\n    };\n    this.getCard = this.getCard.bind(this);\n  }\n  async componentDidMount() {\n    let deck = await axios.get(`${API_URL}/new/shuffle/`);\n    console.log(deck);\n    this.setState({ deck: deck.data });\n  }\n  async getCard() {\n    let id = this.state.deck.deck_id;\n    try {\n      let CARD_URL = `${API_URL}/${id}/draw/`;\n\n      //make request to api for new card\n      let draw = await axios.get(CARD_URL);\n      console.log(draw);\n      if (!draw.data.success) {\n        throw new Error(\"No Cards Remaining\");\n      }\n\n      //Capture Card information\n      let card = draw.data.cards[0];\n      // console.log(`Card: ${JSON.stringify(card)}`);\n\n      //Update State\n      this.setState(st => ({\n        drawn: [\n          ...st.drawn,\n          {\n            id: card.code,\n            image: card.image,\n            name: `${card.value} of ${card.suit}`\n          }\n        ]\n      }));\n    } catch (Error) {\n      alert(Error);\n    }\n  }\n  render() {\n    const cards = this.state.drawn.map(c => (\n      <Card key={c.id} name={c.name} image={c.image} />\n    ));\n    return (\n      <div>\n        <h1 className=\"title\">♦️ Shuffled Deck of Cards ♦️</h1>\n        <h2 className=\"title subtitle\">♦️ A React API Practice Activity ♦️</h2>\n        <button onClick={this.getCard}>Draw Card!</button>\n        <div className=\"Drawn-Cards\">{cards}</div>\n      </div>\n    );\n  }\n}\n\nexport default Deck;\n","import React from 'react';\nimport Deck from './Deck'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Deck />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}